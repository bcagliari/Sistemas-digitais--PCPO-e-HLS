-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    peso_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    peso_ce0 : OUT STD_LOGIC;
    peso_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    masc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    masc_ce0 : OUT STD_LOGIC;
    masc_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc3s1600efg320-4,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.130000,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=236,HLS_SYN_LUT=329}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv34_1C71D : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000011100011100011101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_239 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_243 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_253_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_463 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_cast3_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast3_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_5_fu_269_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_489 : STD_LOGIC_VECTOR (15 downto 0);
    signal media_3_fu_281_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_1_1_fu_293_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_1_reg_502 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_3_cast_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_5_1_fu_319_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_reg_528 : STD_LOGIC_VECTOR (15 downto 0);
    signal media_3_1_fu_331_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_1_2_fu_343_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_2_reg_541 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_10_cast_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_2_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_375_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_reg_562 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_14_reg_567 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_5_2_fu_393_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_reg_577 : STD_LOGIC_VECTOR (15 downto 0);
    signal media_3_2_fu_405_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_12_fu_416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_8_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_ti_fu_449_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_ti_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal media_1_reg_172 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_184 : STD_LOGIC_VECTOR (1 downto 0);
    signal media_1_1_reg_195 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_s_reg_206 : STD_LOGIC_VECTOR (1 downto 0);
    signal media_1_2_reg_217 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_2_reg_228 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_275_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_1_fu_325_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_2_fu_399_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast2_cast_fu_299_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_303_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_1_fu_319_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_cast1_cast_fu_349_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_fu_369_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_5_2_fu_393_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal neg_mul_fu_411_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_13_fu_424_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_fu_434_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_441_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_1_fu_319_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_fu_393_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_269_p10 : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_2_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                j_2_reg_228 <= j_1_2_reg_541;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond_1_fu_287_p2)))) then 
                j_2_reg_228 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                j_reg_184 <= j_1_reg_463;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_184 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_s_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                j_s_reg_206 <= j_1_1_reg_502;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond_fu_247_p2 = ap_const_lv1_0)))) then 
                j_s_reg_206 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    media_1_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                media_1_1_reg_195 <= media_3_1_fu_331_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond_fu_247_p2 = ap_const_lv1_0)))) then 
                media_1_1_reg_195 <= media_1_reg_172;
            end if; 
        end if;
    end process;

    media_1_2_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                media_1_2_reg_217 <= media_3_2_fu_405_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond_1_fu_287_p2)))) then 
                media_1_2_reg_217 <= media_1_1_reg_195;
            end if; 
        end if;
    end process;

    media_1_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                media_1_reg_172 <= media_3_fu_281_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                media_1_reg_172 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                j_1_1_reg_502 <= j_1_1_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                j_1_2_reg_541 <= j_1_2_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                j_1_reg_463 <= j_1_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond_fu_247_p2 = ap_const_lv1_0))) then
                    j_cast3_reg_468(1 downto 0) <= j_cast3_fu_259_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                neg_ti_reg_597 <= neg_ti_fu_449_p2;
                tmp_12_reg_587 <= media_1_2_reg_217(15 downto 15);
                tmp_8_reg_592 <= tmp_8_fu_438_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then
                reg_239 <= input_r_q0;
                reg_243 <= peso_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_2_fu_337_p2))) then
                    tmp_10_cast_reg_546(3 downto 0) <= tmp_10_cast_fu_359_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond_2_fu_337_p2)))) then
                tmp_11_reg_562 <= tmp_11_fu_375_p1;
                tmp_14_reg_567 <= mul_fu_369_p2(33 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_1_fu_287_p2))) then
                    tmp_3_cast_reg_507(2 downto 0) <= tmp_3_cast_fu_309_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                tmp_5_1_reg_528 <= tmp_5_1_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                tmp_5_2_reg_577 <= tmp_5_2_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                tmp_5_reg_489 <= tmp_5_fu_269_p2;
            end if;
        end if;
    end process;
    j_cast3_reg_468(31 downto 2) <= "000000000000000000000000000000";
    tmp_3_cast_reg_507(31 downto 3) <= "00000000000000000000000000000";
    tmp_10_cast_reg_546(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_247_p2, exitcond_1_fu_287_p2, exitcond_2_fu_337_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond_fu_247_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = exitcond_1_fu_287_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_lv1_0 = exitcond_2_fu_337_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        neg_ti_reg_597 when (tmp_12_reg_587(0) = '1') else 
        tmp_8_reg_592;
    exitcond_1_fu_287_p2 <= "1" when (j_s_reg_206 = ap_const_lv2_3) else "0";
    exitcond_2_fu_337_p2 <= "1" when (j_2_reg_228 = ap_const_lv2_3) else "0";
    exitcond_fu_247_p2 <= "1" when (j_reg_184 = ap_const_lv2_3) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state2, j_cast3_fu_259_p1, ap_CS_fsm_state6, tmp_3_cast_fu_309_p1, ap_CS_fsm_state10, tmp_10_cast_fu_359_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            input_r_address0 <= tmp_10_cast_fu_359_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            input_r_address0 <= tmp_3_cast_fu_309_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            input_r_address0 <= j_cast3_fu_259_p1(4 - 1 downto 0);
        else 
            input_r_address0 <= "XXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_1_fu_293_p2 <= std_logic_vector(unsigned(j_s_reg_206) + unsigned(ap_const_lv2_1));
    j_1_2_fu_343_p2 <= std_logic_vector(unsigned(j_2_reg_228) + unsigned(ap_const_lv2_1));
    j_1_fu_253_p2 <= std_logic_vector(unsigned(j_reg_184) + unsigned(ap_const_lv2_1));
    j_2_cast1_cast_fu_349_p1 <= std_logic_vector(resize(unsigned(j_2_reg_228),4));
    j_cast2_cast_fu_299_p1 <= std_logic_vector(resize(unsigned(j_s_reg_206),3));
    j_cast3_fu_259_p1 <= std_logic_vector(resize(unsigned(j_reg_184),32));

    masc_address0_assign_proc : process(j_cast3_reg_468, ap_CS_fsm_state4, tmp_3_cast_reg_507, ap_CS_fsm_state8, tmp_10_cast_reg_546, ap_CS_fsm_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            masc_address0 <= tmp_10_cast_reg_546(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            masc_address0 <= tmp_3_cast_reg_507(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            masc_address0 <= j_cast3_reg_468(4 - 1 downto 0);
        else 
            masc_address0 <= "XXXX";
        end if; 
    end process;


    masc_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)))) then 
            masc_ce0 <= ap_const_logic_1;
        else 
            masc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    media_3_1_fu_331_p2 <= std_logic_vector(unsigned(media_1_1_reg_195) + unsigned(tmp_6_1_fu_325_p2));
    media_3_2_fu_405_p2 <= std_logic_vector(unsigned(media_1_2_reg_217) + unsigned(tmp_6_2_fu_399_p2));
    media_3_fu_281_p2 <= std_logic_vector(unsigned(tmp_6_fu_275_p2) + unsigned(media_1_reg_172));
    mul_fu_369_p1 <= media_1_2_reg_217;
    mul_fu_369_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &ap_const_lv34_1C71D) * signed(mul_fu_369_p1))), 34));
    neg_mul_fu_411_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(tmp_11_reg_562));
    neg_ti_fu_449_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_9_fu_441_p3));

    peso_address0_assign_proc : process(ap_CS_fsm_state2, j_cast3_fu_259_p1, ap_CS_fsm_state6, tmp_3_cast_fu_309_p1, ap_CS_fsm_state10, tmp_10_cast_fu_359_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            peso_address0 <= tmp_10_cast_fu_359_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            peso_address0 <= tmp_3_cast_fu_309_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            peso_address0 <= j_cast3_fu_259_p1(4 - 1 downto 0);
        else 
            peso_address0 <= "XXXX";
        end if; 
    end process;


    peso_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)))) then 
            peso_ce0 <= ap_const_logic_1;
        else 
            peso_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_address0_assign_proc : process(j_cast3_reg_468, ap_CS_fsm_state5, tmp_3_cast_reg_507, ap_CS_fsm_state9, tmp_10_cast_reg_546, ap_CS_fsm_state13)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            res_address0 <= tmp_10_cast_reg_546(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            res_address0 <= tmp_3_cast_reg_507(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            res_address0 <= j_cast3_reg_468(4 - 1 downto 0);
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    res_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, tmp_6_fu_275_p2, tmp_6_1_fu_325_p2, tmp_6_2_fu_399_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            res_d0 <= tmp_6_2_fu_399_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            res_d0 <= tmp_6_1_fu_325_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            res_d0 <= tmp_6_fu_275_p2;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_359_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_353_p2),32));
    tmp_11_fu_375_p1 <= mul_fu_369_p2(33 - 1 downto 0);
    tmp_12_fu_416_p3 <= media_1_2_reg_217(15 downto 15);
    tmp_13_fu_424_p4 <= neg_mul_fu_411_p2(32 downto 20);
    tmp_3_cast_fu_309_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_303_p2),32));
    tmp_3_fu_303_p2 <= std_logic_vector(unsigned(j_cast2_cast_fu_299_p1) + unsigned(ap_const_lv3_3));
    tmp_5_1_fu_319_p0 <= tmp_5_1_fu_319_p00(8 - 1 downto 0);
    tmp_5_1_fu_319_p00 <= std_logic_vector(resize(unsigned(reg_239),16));
    tmp_5_1_fu_319_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_5_1_fu_319_p0) * signed(reg_243))), 16));
    tmp_5_2_fu_393_p0 <= tmp_5_2_fu_393_p00(8 - 1 downto 0);
    tmp_5_2_fu_393_p00 <= std_logic_vector(resize(unsigned(reg_239),16));
    tmp_5_2_fu_393_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_5_2_fu_393_p0) * signed(reg_243))), 16));
    tmp_5_fu_269_p1 <= tmp_5_fu_269_p10(8 - 1 downto 0);
    tmp_5_fu_269_p10 <= std_logic_vector(resize(unsigned(reg_239),16));
    tmp_5_fu_269_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(reg_243) * signed('0' &tmp_5_fu_269_p1))), 16));
    tmp_6_1_fu_325_p2 <= (masc_q0 and tmp_5_1_reg_528);
    tmp_6_2_fu_399_p2 <= (masc_q0 and tmp_5_2_reg_577);
    tmp_6_fu_275_p2 <= (masc_q0 and tmp_5_reg_489);
        tmp_7_fu_434_p1 <= std_logic_vector(resize(signed(tmp_13_fu_424_p4),16));

        tmp_8_fu_438_p1 <= std_logic_vector(resize(signed(tmp_14_reg_567),16));

    tmp_9_fu_441_p3 <= 
        tmp_7_fu_434_p1 when (tmp_12_fu_416_p3(0) = '1') else 
        tmp_8_fu_438_p1;
    tmp_s_fu_353_p2 <= std_logic_vector(unsigned(j_2_cast1_cast_fu_349_p1) + unsigned(ap_const_lv4_6));
end behav;
